<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>穷游庐山</title>
    <link href="/2025/03/02/fun/"/>
    <url>/2025/03/02/fun/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这是1月12日早上拍的日出，手都冻僵了</p><div class="custom-video-container">  <video     controls                   <!-- 启用原生控件 -->    preload="metadata"         <!-- 仅预加载元数据 -->    style="width: 100%; border-radius: 8px;"    poster="https://你的R2域名/path/poster.jpg"  <!-- 视频封面（可选） -->  >    <!-- 直接使用 R2 直链 -->    <source src="https://pub-a3f1bd9f229949c4a1c424d879a5badf.r2.dev/d6314d3601dd96f7d6a73ed60e5e989f.mp4" type="video/mp4">    您的浏览器不支持视频播放  </video></div><!-- 响应式样式（可选） --><style>.custom-video-container {  max-width: 800px;  margin: 1.5rem auto;}video {  background: #000;  box-shadow: 0 2px 8px rgba(0,0,0,0.1);}</style><p>这些都是过程中拍的一些照片，感觉我还是不会拍照</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250302092151263.jpg" alt=""></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250302092226918.jpg" alt=""></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250302092154663.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250302092230718.jpg" alt=""></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250302092224158.jpg" alt=""></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250302092221937.jpg" alt="小路"></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250302094904533.jpg" alt=""></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250302094904531.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250302094904530.jpg" alt=""></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250302094904529.jpg" alt=""></div></div></div><p>这是谁家的小狗呀</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250302094904525.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250302094904526.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250302094904532.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250302094904528.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250302094904527.jpg" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>玩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我接触的第一个算法</title>
    <link href="/2025/03/01/suanfa/"/>
    <url>/2025/03/01/suanfa/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="custom-audio-player">  <div class="audio-info">    <button class="play-button" id="playButton" aria-label="播放音频">      <svg class="play-icon" viewBox="0 0 24 24" fill="white">        <path d="M8 5v14l11-7z"/>      </svg>      <svg class="pause-icon" viewBox="0 0 24 24" fill="white">        <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>      </svg>    </button>    <div class="audio-title">天后 - 陈势安</div>  </div>  <div class="progress-container" id="progressContainer">    <div class="progress-bar" id="progressBar"></div>  </div>  <div class="time-display">    <span id="currentTime">0:00</span>    <span id="duration">0:00</span>  </div>  <!-- 修正后的音频路径 -->  <audio id="audioElement" style="display: none;">    <source src="https://pub-a3f1bd9f229949c4a1c424d879a5badf.r2.dev/%E5%A4%A9%E5%90%8E.mp3" type="audio/mpeg">    你的浏览器不支持音频播放。  </audio></div><style>  /* 自定义播放器样式 */  .custom-audio-player {    width: 100%;    background-color: rgba(34, 46, 80, 0.8);    border-radius: 8px;    padding: 12px;    margin: 1.5rem 0;    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);  }  .audio-info { display: flex; align-items: center; margin-bottom: 10px; }  .audio-title {     color: #ffffff;    font-size: 1rem;    font-weight: 600;    margin-left: 10px;    flex-grow: 1;  }  .play-button {    background-color: #0e83cd;    border: none;    border-radius: 50%;    width: 36px;    height: 36px;    cursor: pointer;    transition: background-color 0.3s;    display: flex;    justify-content: center;    align-items: center;  }  .progress-container {    width: 100%;    height: 6px;    background-color: rgba(255, 255, 255, 0.2);    border-radius: 3px;    margin-bottom: 8px;  }  .progress-bar {    height: 100%;    background-color: #0e83cd;    border-radius: 3px;    width: 0%;    transition: width 0.1s linear;  }  .time-display {    display: flex;    justify-content: space-between;    color: rgba(255, 255, 255, 0.8);    font-size: 0.8rem;  }  .pause-icon { display: none; }</style><script>document.addEventListener('DOMContentLoaded', function() {  const audioElement = document.getElementById('audioElement');  const playButton = document.getElementById('playButton');  const playIcon = document.querySelector('.play-icon');  const pauseIcon = document.querySelector('.pause-icon');  const progressBar = document.getElementById('progressBar');  const progressContainer = document.getElementById('progressContainer');  const currentTimeDisplay = document.getElementById('currentTime');  const durationDisplay = document.getElementById('duration');  // 初始化时间显示  audioElement.addEventListener('loadedmetadata', () => {    durationDisplay.textContent = formatTime(audioElement.duration);  });  // 进度条更新  audioElement.addEventListener('timeupdate', () => {    const percent = (audioElement.currentTime / audioElement.duration) * 100;    progressBar.style.width = `${percent}%`;    currentTimeDisplay.textContent = formatTime(audioElement.currentTime);  });  // 播放/暂停控制  playButton.addEventListener('click', () => {    audioElement.paused ? audioElement.play() : audioElement.pause();    playIcon.style.display = audioElement.paused ? 'block' : 'none';    pauseIcon.style.display = audioElement.paused ? 'none' : 'block';  });  // 点击进度条跳转  progressContainer.addEventListener('click', (e) => {    const rect = progressContainer.getBoundingClientRect();    const percent = (e.clientX - rect.left) / rect.width;    audioElement.currentTime = percent * audioElement.duration;  });  // 时间格式化函数  function formatTime(seconds) {    const mins = Math.floor(seconds / 60);    const secs = Math.floor(seconds % 60);    return `${mins}:${secs.toString().padStart(2, '0')}`;  }});</script><div class="note note-info">            <p>有人疼</p><p>才显得多么出众</p>          </div><h1>我接触的第一个算法</h1><p>在机房上第一节程序设计课的时候，我看老师的那个10个数求最大值的C语言程序挺有意思的，和我平时的那些过家家代码有点不同</p><p>在下课的时候我也开始尝试了一下，我一开始没有完成。但是我问了deepseek，后来就写出来了。</p><p>我一开始的代码是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250301220744995.jpg" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> max, x, i;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>    max = x;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;max = %d&quot;</span>, max);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一开始我不知道for循环里面怎么写，我也没注意到max = x，我就问deepseek，然后我就理解了：</p><p>首先初始化一个max(将第一个x赋max)然后再不断的将新输入的x与其比较。</p><p>连续输入10个数，用for循环对每个数进行比较，让更大的x再赋值给max，这样<strong>不断更新max的值</strong>，确保max始终大于x的值。</p><p>我就是没有这种思路所以写不出for循环里比较和更新的程序，于是我又重新写了一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> max, x, i;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>    max = x;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x); <span class="hljs-comment">//循环输入用于比较</span><br>        <span class="hljs-keyword">if</span>(x &gt; max) &#123;<br>            max = x;  <span class="hljs-comment">//如果x大于max，则将更大的x赋值给max</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;max = %d&quot;</span>, max);  <span class="hljs-comment">// 输入完10个数后的max就是最大值了</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我就知道了，原来算法里最基础的知识点<code>变量的初始化</code>和<code>变量的动态更新</code>。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git回滚</title>
    <link href="/2025/02/23/git_commend/"/>
    <url>/2025/02/23/git_commend/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note note-info">            <p>如果你愿意一层一层一层的拨开我的心</p><p>你会发现 你会讶异</p><p>你是我最压抑 最深处的秘密</p>          </div><p>2025-2-22</p><p>可以通过 <code>git commit -am</code> 命令提交所有文件的修改（当你觉得所有工作都做完以后）。但是如果有新文件，需要先 <code>git add</code>新文件名，再 <code>git commit </code>提交修改。因为 <code>git commit -am</code> 命令适用于已经跟踪的文件。</p><p>如果觉得命令太长了，可以使用alias命令来定义成一个别名,比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --oneline --graph --decorate --all<br><br><span class="hljs-built_in">alias</span> graph = <span class="hljs-string">&quot;git log --oneline --graph --decorate --all&quot;</span> <span class="hljs-comment">#将这个命令定义成一个更短的别名</span><br></code></pre></td></tr></table></figure><p>2025-2-26</p><h2 id="回滚">回滚</h2><h3 id="文件回滚">文件回滚</h3><p>情况一：如果没有add，即没有暂存只在本地修改的话：</p><ol><li><p><code>git restore &lt;file&gt;</code> 可以将修改的文件<strong>恢复到最近一次提交的状态</strong></p></li><li><p><code>git checkout &lt;commit-hash&gt; &lt;file&gt;</code> 可以将修改的文件<strong>恢复到<commit-hash>提交的状态</strong></p></li></ol><p>情况二：如果已经add了的话:  <code>git restore --staged &lt;file&gt;</code> 取消暂存</p><ol><li><p>再利用<code>情况一</code> 恢复文件，这种操作比较安全</p></li><li><p>或使用<code>git checkout HEAD &lt;file&gt;</code>，直接恢复到HEAD提交，这个命令会丢失本地的修改</p></li></ol><p>情况三：如果已经commit（未push）了的话：</p><ol><li><p>可以使用<code>git reset --soft HEAD~1</code>，撤销最近的一次提交，保留修改（软回滚，仅仅回退commit，回到add之后的状态。这样<code>git log</code>不会再包含这次提交，但你的修改仍然存在，并处于<strong>已暂存</strong>的状态）</p></li><li><p>或者使用<code>git reset HEAD~1</code>，<code>git log</code>同样不包含这次提交，但你的修改仍然存在，并处于<strong>未暂存</strong>的状态</p></li><li><p>或者使用<code>git reset --hard HEAD~1</code>，你的修改无法保存，完全恢复到上次提交的状态。</p></li></ol><p>情况四：如果已经push了的话：</p><p>总结：<br><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250226095341508.png" alt=""></p><h3 id="分支回滚">分支回滚</h3><p>2025-2-23</p><h2 id="关于git-stash">关于git stash</h2><p>当你在开发一个分支时，突然发现自己需要切换到另一个分支，但是这个分支还没有提交，但是你又不想提交，因为你还有一些工作没有做完，这时候可以使用<code>git stash</code>命令来保存当前的工作状态，然后切换到另一个分支，等你做完了以后，再切换回来，使用<code>git stash pop</code>命令来恢复之前的工作状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git stash <span class="hljs-comment"># 保存当前的工作状态</span><br>git stash list <span class="hljs-comment"># 查看保存的工作状态列表</span><br>git stash pop <span class="hljs-comment"># 恢复最近一次保存的工作状态</span><br></code></pre></td></tr></table></figure><h2 id="关于git-pull">关于git pull</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull = git fetch + git merge<br></code></pre></td></tr></table></figure><p>git pull 是 git fetch 和 git merge 的缩写。git fetch 用于从远程仓库获取最新的代码，而 git merge 则用于将获取到的代码合并到本地分支。但是如果多人共同开发一个分支时，可能会出现冲突。</p><p>比如同事A修改了文件A，同事B也修改了文件A，但是同事A先一步提交了，同事B后一步提交，那同事B就会被拒绝提交，因为git merge 会将本地分支和远程分支进行合并，如果有冲突，就会拒绝合并。</p><p>所以如果多人共同开发一个分支时，最好使用 <code>git pull --rebase</code>命令，这样有冲突的话，会把你本地的提交放一边，先把远程分支的提交拉下来，然后再把你的提交放回去，这样不仅解决了冲突还保持了分支的线性。</p><p>来源于<a href="https://www.bilibili.com/video/BV1McyYYtEX4/?spm_id_from=333.337.search-card.all.click&amp;vd_source=7184f70b126b0d6d3ad6ad4235c0c45c">技术爬爬虾</a></p><p>2025-2-27</p><h2 id="关于分支合并">关于分支合并</h2><h4 id="关于合并（merge）">关于合并（merge）</h4><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250223140435751.png" alt="merge"></p><p>merge会将两个分支的提交合并成一个新的提交。分支各自的提交记录都会保留，保留整个过程完整的提交记录，可以看到每个成员的贡献。</p><h4 id="关于变基（rebase）">关于变基（rebase）</h4><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250223140917518.png" alt="rebase"></p><p>来源于<a href="https://www.bilibili.com/video/BV1HM411377j?spm_id_from=333.788.videopod.sections&amp;vd_source=7184f70b126b0d6d3ad6ad4235c0c45c&amp;p=18">GeekHour</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase &lt;branch&gt; <span class="hljs-comment"># 把当前分支的提交放到&lt;branch&gt;分支的后面</span><br>git rebase -i &lt;branch&gt; <span class="hljs-comment"># 交互式的rebase，会弹出一个窗口，让你选择哪些提交要保留，哪些提交要删除</span><br><br><span class="hljs-comment"># 冲突解决时</span><br>git rebase --<span class="hljs-built_in">continue</span> <span class="hljs-comment"># 继续rebase</span><br><br>git rebase --skip<br>git rebase --abort <span class="hljs-comment"># 取消rebase</span><br></code></pre></td></tr></table></figure><h4 id="关于压缩（squash）">关于压缩（squash）</h4><p>它将多个提交合并成一个提交，从而简化提交历史。虽然会保留所有代码变更的最终结果，但会丢失每个提交的细节信息，从而无法追溯每个中间开发步骤</p><h2 id="关于git-rm">关于git rm</h2><h4 id="情况一：如果已经暂存了，就不能直接git-rmbash会报错，会导致暂存区的更改丢失。">情况一：如果已经暂存了，就不能直接<code>git rm</code>bash会报错，会导致暂存区的更改丢失。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> --cached &lt;file&gt; <span class="hljs-comment"># 移除跟踪变为Untracked，但还保留在本地上</span><br><br>git <span class="hljs-built_in">rm</span> -f &lt;file&gt; <span class="hljs-comment"># 强制删除, 不保留在本地</span><br></code></pre></td></tr></table></figure><p>当你误提交了一个有用的文件时，可以使用<code>git rm --cached &lt;file&gt;</code>来删除，但是会保留在本地<br>当你决定弃用一个文件的话，可以使用<code>git rm -f &lt;file&gt;</code>来强制删除</p><h5 id="情况二：如果没有暂存，就可以直接git-rm，会同时删除工作区和暂存区的文件">情况二：如果没有暂存，就可以直接<code>git rm</code>，会同时删除工作区和暂存区的文件</h5><p>2025-2-24</p><h2 id="文件的常见操作">文件的常见操作</h2><blockquote><p>关于这些系统命令是否需要加<code>git</code>前缀，需要根据这个文件（目录）是否被纳入管理即有没有被add</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> &lt;file&gt; <span class="hljs-comment"># 创建文件</span><br>git <span class="hljs-built_in">mv</span> &lt;file&gt; &lt;newfile&gt; <span class="hljs-comment"># 重命名文件</span><br><br><span class="hljs-built_in">echo</span> &lt;content&gt; &gt; &lt;file&gt; <span class="hljs-comment"># 写入文件</span><br><span class="hljs-built_in">echo</span> &lt;content&gt; &gt;&gt; &lt;file&gt; <span class="hljs-comment"># 追加文件内容</span><br><span class="hljs-built_in">cat</span> &lt;file&gt; <span class="hljs-comment"># 查看文件内容</span><br><br><span class="hljs-built_in">cp</span> &lt;file&gt; &lt;newfile&gt; <span class="hljs-comment"># 复制文件</span><br><span class="hljs-built_in">cp</span> -r &lt;<span class="hljs-built_in">dir</span>&gt; &lt;newdir&gt; <span class="hljs-comment"># 复制文件夹</span><br><br><span class="hljs-built_in">mv</span> &lt;file&gt; &lt;newfile&gt; <span class="hljs-comment"># 重命名文件</span><br><br><span class="hljs-built_in">mkdir</span> &lt;<span class="hljs-built_in">dir</span>&gt; <span class="hljs-comment"># 创建文件夹</span><br><span class="hljs-built_in">mkdir</span> -p &lt;dir1&gt;/&lt;dir2&gt; <span class="hljs-comment"># 创建递归文件夹</span><br><br><span class="hljs-built_in">ls</span>                  <span class="hljs-comment"># 列出当前目录文件</span><br><span class="hljs-built_in">ls</span> -l               <span class="hljs-comment"># 详细信息</span><br><span class="hljs-built_in">ls</span> -a               <span class="hljs-comment"># 显示隐藏文件</span><br><span class="hljs-built_in">ls</span> -lh              <span class="hljs-comment"># 以可读格式显示大小</span><br><span class="hljs-built_in">ls</span> -lt              <span class="hljs-comment"># 按修改时间排序</span><br><br><span class="hljs-built_in">cd</span> <span class="hljs-built_in">dirname</span>          <span class="hljs-comment"># 进入目录</span><br><span class="hljs-built_in">cd</span> ..               <span class="hljs-comment"># 返回上一级目录</span><br><span class="hljs-built_in">cd</span> /home/user       <span class="hljs-comment"># 进入指定目录</span><br><span class="hljs-built_in">cd</span> ~                <span class="hljs-comment"># 进入 home 目录</span><br><span class="hljs-built_in">cd</span> -                <span class="hljs-comment"># 返回上次所在目录</span><br><br>git <span class="hljs-built_in">rm</span> -r &lt;<span class="hljs-built_in">dir</span>&gt; <span class="hljs-comment"># 删除文件夹</span><br>git <span class="hljs-built_in">rm</span> -rf &lt;<span class="hljs-built_in">dir</span>&gt; <span class="hljs-comment"># 强制删除文件夹</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>版本控制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为Fluid添加评论系统</title>
    <link href="/2025/02/23/comment-sys/"/>
    <url>/2025/02/23/comment-sys/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note note-info">            <p>缓缓飘落的枫叶像思念</p><p>我点燃烛火温暖岁末的秋天</p>          </div><h2 id="简单介绍">简单介绍</h2><p>utterances是一个基于github issue的评论系统，它利用github的issue来存储评论。</p><p>当访客在博客上发表评论时，会在对应的仓库中创建一个issue，issue的内容就是评论的内容所以要有一个公开的仓库来存储评论。</p><p>构建这个评论系统只需要一个github账号就可以了，还是非常方便的。</p><h2 id="搭建过程">搭建过程</h2><p>先安装utterances，打开 <a href="https://github.com/apps/utterances">utterances - GitHub App</a> 点击 Install 进入安装页面</p><p>按照提示一步一步填入对应的信息</p><p>首先是在仓库访问权限<code>Repositeory access</code>选择仅选定的仓库<code>Only select repositories</code>，然后选择自己的博客仓库（比如我就是 <code>tingshuo-yiqing/tingshuo-yiqing.github.io</code>，也可以安装到其他仓库），然后点击 Install<br><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250224090359554.png" alt=""></p><p>这时已经配置好了，接下来有一些个性化设置让你选择。</p><p><code>Blog Post ↔️ Issue Mapping</code>表示 issues 标题和博客 posts 的映射关系，默认即可。</p><p>把主题配置文件(<code>_config.theme.yml</code>)的 <code>enable: true</code> 和<code>type: utterances</code> 打开,再把 <code>utterances</code> 对应的参数改成HTML里面的。</p><p>复制最底下的HTML代码到博客的 <code>about</code> 中。<br>然后在 <code>index.md</code> 中添加 <code>comments: true</code> 即可。</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250224091216161.png" alt=""></p><p>这样就可以在 about 页添加评论了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>comment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git 使用指北与问题解决</title>
    <link href="/2025/02/20/git-flow/"/>
    <url>/2025/02/20/git-flow/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note note-info">            <p>想用一杯Latte把你灌醉</p><p>好让你能多爱我一点</p>          </div><h2 id="1-访问github并汉化">1.访问github并汉化</h2><p>在微软商店安装<strong>Watt Toolkit</strong>可以直接加速github，然后用qq邮箱或其它邮箱都可以注册一下</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219224935829.png" alt=""></p><p>搜索框搜索“chinese汉化”认准第一个star7.8k即可，然后安装油猴(Tampermonkey)插件，再安装汉化脚本。还有许多脚本可以安装。</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219225253894.png" alt=""></p><p>进入文件夹右键打开选项卡，点击<code>用git bash打开</code></p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250220073842647.png" style="zoom:25%;" /><h2 id="2-安装和配置git">2.安装和配置git</h2><p>下载地址<a href="https://git-scm.com/">git-scm.com</a>，<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">镜像下载地址</a></p><h4 id="显示隐藏文件夹：">显示隐藏文件夹：</h4><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219230110370.png" style="zoom: 25%;" /><p>在VS code中显示隐藏文件夹只需要在设置里找到：Files:Exclude再把<code>**/.git</code>删除即可显示出来</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219231851407.png" alt=""></p><h2 id="3-git命令行配置">3.git命令行配置</h2><h4 id="初始化仓库过程用到的命令：">初始化仓库过程用到的命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git -v<br>git init  <span class="hljs-comment">#</span><br>git init -b main   <span class="hljs-comment">#-b main 明确告诉 Git 将初始分支命名为 main。</span><br><br>git config --global user.name <span class="hljs-string">&quot;你的名字&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;你的邮箱&quot;</span><br><br>git config --list <span class="hljs-comment">#查看刚刚配置的用户名和邮箱</span><br>git config --global --list <span class="hljs-comment"># 这个也可以查看配置信息</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219232912375.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219232959200.png" alt=""></p><h4 id="bash的基本操作">bash的基本操作</h4><p>常用快捷键：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ctrl + C 中断当前命令<br>Ctrl + L 或 clear: 清屏<br>Ctrl + A 移动光标到行头<br>Ctrl + E: 移动光标到行尾<br>Ctrl + U: 删除光标前的所有字符<br>Ctrl + K: 删除光标后的所有字符<br>Ctrl + W: 删除光标前的一个单词<br>Tab: 自动补全<br>↑ / ↓: 浏览历史命令<br></code></pre></td></tr></table></figure><h2 id="3-基础操作流程">3.基础操作流程</h2><h4 id="专业名词的理解">专业名词的理解</h4><p><code>git status</code>最常见的命令之一，初学者最好每一个命令就查看一下文件的状态.<code>git status -s</code>/<code>git status --short</code>是精简输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-comment"># 是将xxx输出到控制台，如果有空格的话要加引号</span><br><span class="hljs-built_in">echo</span> xxx &gt; &lt;file&gt;  <span class="hljs-comment"># 将xxx写入写入文件中，如果没有就创建一个</span><br><span class="hljs-built_in">echo</span> xxx &gt;&gt; &lt;file&gt; <span class="hljs-comment"># 将xxx追加写入文件中</span><br><br><br>git add xxx  <span class="hljs-comment"># U &gt; A</span><br>git add .<br><span class="hljs-comment"># A是已添加索引（会提示你git commit），U是未追踪文件（会提示你git add）</span><br><br>git commit -m <span class="hljs-string">&quot;提交信息，要准确详细&quot;</span><br>git commit     <span class="hljs-comment"># 进入vim编辑器，编辑</span><br><br>git <span class="hljs-built_in">log</span> <br>git <span class="hljs-built_in">log</span> -2 <span class="hljs-comment">#只看最近两条</span><br>git <span class="hljs-built_in">log</span> --oneline# 更简洁<br></code></pre></td></tr></table></figure><h4 id="文件的删除（命令行）">文件的删除（命令行）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> &lt;file&gt; <span class="hljs-comment"># 从暂存区和工作区删除</span><br><br>git re -cached &lt;file&gt; <span class="hljs-comment"># 只从暂存区中删除，工作区不变</span><br><br>git <span class="hljs-built_in">rm</span> -f &lt;file&gt; <span class="hljs-comment"># 强制删除文件，即使文件在工作区被修改</span><br><br>git <span class="hljs-built_in">rm</span> -rf &lt;directory&gt; <span class="hljs-comment">#递归删除所有文件和子目录</span><br><br>git commit -m <span class="hljs-string">&quot;删除&lt;file&gt;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>删除后需要<code>git commit</code>提交，如果只是想从工作目区中删除文件，可以使用操作系统的删除命令（rm <file>）然后再使用<code>git add .</code></p></blockquote><h4 id="文件删除（IDE）">文件删除（IDE）</h4><h2 id="4-SSH秘钥的创建">4.SSH秘钥的创建</h2><p>生成秘钥（ed25519算法）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span>  <br></code></pre></td></tr></table></figure><p>如果一些旧系统不支持ed25519算法的话，可以使用RSA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p><strong>第一次使用这个命令</strong>一直回车即可</p><p>在用户文件夹里查看密钥对</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219152152312.png" alt=""></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219152313294.png" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250220084930823.png" alt=""></div></div></div><p>添加公钥.pub文件复制粘贴至Github→ Settings → SSH Key，再连接测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>正常会报错：连接测试时出现：<code>ssh: connect to host github.com port 22: Connection timed out</code>通常是因为网络环境无法通过 <strong>22 端口</strong>连接到 GitHub 的 SSH 服务。可以通过以下步骤解决，官方文档为<a href="https://docs.github.com/en/authentication/troubleshooting-ssh/using-ssh-over-the-https-port">通过HTTP端口使用SSH</a></p><p>我们需要改HTTPS端口（443）使用SSH。方法为在生成的.ssh文件夹中添加配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑 SSH 配置文件</span><br>vim ~/.ssh/config<br><br><span class="hljs-comment"># 配置文件内容：</span><br>Host github.com          <span class="hljs-comment"># 别名，可以自定义</span><br>Hostname ssh.github.com   <span class="hljs-comment"># GitHub SSH 的实际主机名</span><br>Port 443                <span class="hljs-comment"># 使用 443 端口</span><br>User git                <span class="hljs-comment"># 使用 git 用户</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250220074831847.png" style="zoom:25%;" /><p>粘贴好后按Ecs再英文状态下的<code>:wq</code>保存退出，可以检查一下</p><p>再次测试时出现：<code>Hi username ! You've successfully authenticated, but GitHub does not provide shell access.</code>即成功了，我们就可以通过SSH克隆和推送仓库了</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250220085232998.png" alt=""></p><h2 id="5-gitignore的实践">5.gitignore的实践</h2><p>创建.gitignore文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将不需要推送的文件写入到.gitignore上</span><br><span class="hljs-built_in">echo</span> xxx &gt; .gitignore<br><span class="hljs-comment"># xxx可以是字符串，文件，文件夹，第一次使用重定向符&gt;</span><br><span class="hljs-comment">#如果已经用了.gitignore文件的话，就用&gt;&gt;追加符来添加新的文件或文件夹</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;.xxx\n.xx\n&quot;</span> &gt;&gt; .gitignore<br><span class="hljs-comment">#前面的.表示在根目录下</span><br></code></pre></td></tr></table></figure><p>常见的.gitignore文件包含：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 忽略所有 .log 文件,但是保留error.log文件</span><br>*.<span class="hljs-built_in">log</span><br>!error.log<br><br><span class="hljs-comment"># 忽略 node_modules 目录</span><br>node_modules/<br><br><span class="hljs-comment"># 忽略特定文件</span><br>config.ini<br><br><span class="hljs-comment"># 不忽略某个文件(即使前面已经有忽略规则)</span><br>!important.log<br></code></pre></td></tr></table></figure><blockquote><p>.gitignore 仅对<strong>从未被 Git 跟踪过的文件</strong>生效。若文件已被提交过，即使后续加入 .gitignore，仍需手动从 Git 中移除。此外，未跟踪但未忽略的文件仍可能导致分支污染，需定期检查工作目录状态（git status）</p></blockquote><p>更多模版可以参考github上的项目：<a href="https://github.com/github/gitignore">gitignore</a></p><h2 id="6-版本的回滚">6.版本的回滚</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看HEAD</span><br>git <span class="hljs-built_in">log</span> --oneliine --groph <span class="hljs-comment"># 更加简洁的查看提交ID</span><br>git reflog  <span class="hljs-comment"># 含已删除提交历史，可以快速找到提交ID</span><br><br>git diff HEAD &lt;commit-id&gt; <span class="hljs-comment"># 对比差异</span><br><br>git reset --hard HEAD~1  <span class="hljs-comment"># 彻底回退上一个提交</span><br>git reset --soft HEAD~1  <span class="hljs-comment"># 保留修改但回退 commit</span><br><span class="hljs-comment"># HEAD~1一般就是提交ID前6个字母或数字</span><br></code></pre></td></tr></table></figure><p>使用<code>git reset --hard</code>会重置工作目录到指定的提交，所有未提交的修改都会被删除。需要注意备份或暂存（<code>git stash</code>）这些更改，避免数据丢失。</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250222164535621.png" alt="提交ID"></p><h2 id="7-首次推送的命令：">7.首次推送的命令：</h2><p>关键是：</p><ul><li><p><strong>添加远程仓库的 URL (Add Remote Origin</strong></p></li><li><p><strong>推送本地分支到远程仓库 (Push to Remote):</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin &lt;你的GitHub仓库URL&gt;<br>git remote -v <span class="hljs-comment">#查看已配置的远程仓库信息</span><br><br>git push -u origin master <span class="hljs-comment">#取决于是main还是master且第一次需要 -u</span><br><br></code></pre></td></tr></table></figure><p>之后便可以</p><ul><li>推送后续提交: <strong>git push</strong> (默认会推送当前分支到其追踪的远程分支)</li><li>拉取远程更新: <strong>git pull</strong> (默认会拉取远程追踪分支的更新并合并到当前分支)</li></ul><h2 id="8-深入分支">8.深入分支</h2><blockquote><p>主分支包含了所有最终修改历史，建议不要乱动。因为你的改动会影响到其它在参与这个项目的人，很可能出现合并冲突。</p></blockquote><table><thead><tr><th>常见分支</th><th>功能</th></tr></thead><tbody><tr><td>develop（开发分支）dev</td><td></td></tr><tr><td>feature（功能分支）feat</td><td></td></tr><tr><td>release（发布分支）</td><td></td></tr><tr><td>hotfix（热修复分支）</td><td></td></tr><tr><td>bugfix（缺陷分支）</td><td></td></tr><tr><td>support（支持分支）</td><td></td></tr></tbody></table><h4 id="本地分支">本地分支</h4><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250222160617241.png" alt=""></p><p>这里可能会出现一个幻觉：我在分支里创建的文件为什么主分支里也有？，不是说都是独立的吗？原因是<strong>你未将新建的文件提交（commit）到分支中</strong>。此时文件处于“未跟踪”状态（untracked）（即还没有add），切换分支时这些未提交的改动会保留在工作目录中，与分支无关。因为<strong>未执行 <code>git add</code> 和 <code>git commit</code></strong>，所以<code>my.log</code> 未被记录到 Git 版本控制中。切换回 <code>master</code> 分支时，<strong>未提交的改动（包括未跟踪文件）会保留在工作目录</strong>，因此 <code>my.log</code> 仍然存在。</p><p>简单来说：</p><ul><li><strong>未提交文件</strong>：游离于分支外，切换分支时保留。</li><li><strong>提交后文件</strong>：与分支绑定，切换分支时自动隔离。</li></ul><p>当我们提交后：</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250222092557434.png" alt=""></p><p>这样主分支里就没有my.log了，就可以安心在分支里操作不用怕误操作主分支啦</p><p><strong>小总结</strong>：未提交的文件（untracked files）<strong>不属于任何分支</strong>，它们会“跟随”你的工作目录。只有提交到分支后，文件才会与分支绑定。</p><p>接下来是在分支里修改了文件，如果不提交或保存的话<strong>是不会让你切换的</strong></p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250222102912825.png" alt=""></p><p>它会让你在切换之前进行<code>git commit</code>或<code>git stash</code>先暂时保存再<code>git stash pop</code>恢复</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250222104045050.png" alt=""></p><p>这样就可以在你的本地分支上安心的操作了</p><p><strong>在分支间共享某些文件</strong>时（如配置文件），应通过 Git 的合并（<code>git merge</code>）或变基（<code>git rebase</code>）操作实现，而非手动复制文件。</p><p>执行删除操作的时候要格外小心<br>-d用于删除已合并过的分支，即已经被merge了<br>-D用于强制删除分支（不管是否合并过）</p><p>可以在在命令行中查看分支图<code>git log --graph --oneline --decorate --all</code>来可视化分支结构不过可能有一点抽象</p><h4 id="远程分支">远程分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -a <span class="hljs-comment"># 列出远程和本地分支，即所有分支</span><br><br>git push &lt;远程仓库名称比如origin&gt; &lt;分支名称&gt;  <span class="hljs-comment"># 推送某个分支</span><br>git push &lt;远程仓库名称&gt; --all <span class="hljs-comment"># 推送所有分支</span><br> <br>git push &lt;远程仓库名称&gt; -d &lt;分支名称&gt;<br></code></pre></td></tr></table></figure><p>在github上删除分支时的细节：</p><p>虽然在github上删除远程分支很简单，但是会导致本地库中缓存的远程分支与实际远程分支不一致。所以还要在git bash中同步远程分支执行：<code>git remote prune &lt;远程仓库名称&gt;</code></p><p><strong>还有一些细节比如，回溯、打标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout 提交ID(Commit ID)<br>git checkout 分支<br>git checkout tag<br><br>git tag <span class="hljs-comment"># 查看标签</span><br>git tag -d xxx <span class="hljs-comment"># 删除标签</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>版本控制</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>音悦</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note note-warning">            <p>如果音乐无法播放，请开魔法</p>          </div><div class="custom-audio-player">  <div class="audio-info">    <button class="play-button" id="playButton" aria-label="播放音频">      <svg class="play-icon" viewBox="0 0 24 24" fill="white">        <path d="M8 5v14l11-7z"/>      </svg>      <svg class="pause-icon" viewBox="0 0 24 24" fill="white">        <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>      </svg>    </button>    <div class="audio-title">痴心绝对 - 李圣杰</div>  </div>  <div class="progress-container" id="progressContainer">    <div class="progress-bar" id="progressBar"></div>  </div>  <div class="time-display">    <span id="currentTime">0:00</span>    <span id="duration">0:00</span>  </div>  <!-- 修正后的音频路径 -->  <audio id="audioElement" style="display: none;">    <source src="https://pub-a3f1bd9f229949c4a1c424d879a5badf.r2.dev/M800003kIRU93Grw5P.mp3" type="audio/mpeg">    你的浏览器不支持音频播放。  </audio></div><style>  /* 自定义播放器样式 */  .custom-audio-player {    width: 100%;    background-color: rgba(34, 46, 80, 0.8);    border-radius: 8px;    padding: 12px;    margin: 1.5rem 0;    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);  }  .audio-info { display: flex; align-items: center; margin-bottom: 10px; }  .audio-title {     color: #ffffff;    font-size: 1rem;    font-weight: 600;    margin-left: 10px;    flex-grow: 1;  }  .play-button {    background-color: #0e83cd;    border: none;    border-radius: 50%;    width: 36px;    height: 36px;    cursor: pointer;    transition: background-color 0.3s;    display: flex;    justify-content: center;    align-items: center;  }  .progress-container {    width: 100%;    height: 6px;    background-color: rgba(255, 255, 255, 0.2);    border-radius: 3px;    margin-bottom: 8px;  }  .progress-bar {    height: 100%;    background-color: #0e83cd;    border-radius: 3px;    width: 0%;    transition: width 0.1s linear;  }  .time-display {    display: flex;    justify-content: space-between;    color: rgba(255, 255, 255, 0.8);    font-size: 0.8rem;  }  .pause-icon { display: none; }</style><script>document.addEventListener('DOMContentLoaded', function() {  const audioElement = document.getElementById('audioElement');  const playButton = document.getElementById('playButton');  const playIcon = document.querySelector('.play-icon');  const pauseIcon = document.querySelector('.pause-icon');  const progressBar = document.getElementById('progressBar');  const progressContainer = document.getElementById('progressContainer');  const currentTimeDisplay = document.getElementById('currentTime');  const durationDisplay = document.getElementById('duration');  // 初始化时间显示  audioElement.addEventListener('loadedmetadata', () => {    durationDisplay.textContent = formatTime(audioElement.duration);  });  // 进度条更新  audioElement.addEventListener('timeupdate', () => {    const percent = (audioElement.currentTime / audioElement.duration) * 100;    progressBar.style.width = `${percent}%`;    currentTimeDisplay.textContent = formatTime(audioElement.currentTime);  });  // 播放/暂停控制  playButton.addEventListener('click', () => {    audioElement.paused ? audioElement.play() : audioElement.pause();    playIcon.style.display = audioElement.paused ? 'block' : 'none';    pauseIcon.style.display = audioElement.paused ? 'none' : 'block';  });  // 点击进度条跳转  progressContainer.addEventListener('click', (e) => {    const rect = progressContainer.getBoundingClientRect();    const percent = (e.clientX - rect.left) / rect.width;    audioElement.currentTime = percent * audioElement.duration;  });  // 时间格式化函数  function formatTime(seconds) {    const mins = Math.floor(seconds / 60);    const secs = Math.floor(seconds % 60);    return `${mins}:${secs.toString().padStart(2, '0')}`;  }});</script>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-594673fe" role="button" aria-expanded="false" aria-controls="collapse-594673fe">        <div class="fold-arrow">▶</div>痴心绝对      </div>      <div class="fold-collapse collapse" id="collapse-594673fe">        <div class="fold-content">          <p>想用一杯Latte把你灌醉<br>好让你能多爱我一点<br>暗恋的滋味你不懂这种感觉<br>早有人陪的你永远不会</p><p>看见你和他在我面前<br>证明我的爱只是愚昧<br>你不懂我的 那些憔悴<br>是你永远不曾过的体会</p><p>为你付出那种伤心你永远不了解<br>我又何苦勉强自己爱上你的一切<br>你又狠狠逼退 我的防备<br>静静关上门来默数我的泪</p><p>明知道让你离开他的世界不可能会<br>我还傻傻等到奇迹出现的那一天<br>直到那一天 你会发现<br>真正爱你的人独自守着伤悲</p><p>看见你和他在我面前<br>证明我的爱只是愚昧<br>你不懂我的 那些憔悴<br>是你永远不曾过的体会</p><p>明知道让你离开他的世界不可能会<br>我还傻傻等到奇迹出现的那一天<br>直到那一天 你会发现<br>真正爱你的人独自守着伤悲</p><p>曾经我以为我自己会后悔<br>不想爱得太多痴心绝对<br>为你落第一滴泪<br>为你作任何改变<br>也唤不回你对我的坚决</p><p>为你付出那种伤心你永远不了解<br>我又何苦勉强自己爱上你的一切<br>你又狠狠逼退 我的防备<br>静静关上门来默数我的泪</p><p>明知道让你离开他的世界不可能会<br>我还傻傻等到奇迹出现的那一天<br>直到那一天 你会发现<br>真正爱你的人独自守着伤悲</p><p>直到那一天 你会发现<br>真正爱你的人独自守着伤悲</p>        </div>      </div>    </div>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>me</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="custom-audio-player">  <div class="audio-info">    <button class="play-button" id="playButton" aria-label="播放音频">      <svg class="play-icon" viewBox="0 0 24 24" fill="white">        <path d="M8 5v14l11-7z"/>      </svg>      <svg class="pause-icon" viewBox="0 0 24 24" fill="white">        <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>      </svg>    </button>    <div class="audio-title">夜空中最亮的星 - 逃跑计划</div>  </div>  <div class="progress-container" id="progressContainer">    <div class="progress-bar" id="progressBar"></div>  </div>  <div class="time-display">    <span id="currentTime">0:00</span>    <span id="duration">0:00</span>  </div>  <!-- 修正后的音频路径 -->  <audio id="audioElement" style="display: none;">    <source src="https://pub-a3f1bd9f229949c4a1c424d879a5badf.r2.dev/%E5%A4%9C%E7%A9%BA%E4%B8%AD%E6%9C%80%E4%BA%AE%E7%9A%84%E6%98%9F.mp3" type="audio/mpeg">    你的浏览器不支持音频播放。  </audio></div><style>  /* 自定义播放器样式 */  .custom-audio-player {    width: 100%;    background-color: rgba(34, 46, 80, 0.8);    border-radius: 8px;    padding: 12px;    margin: 1.5rem 0;    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);  }  .audio-info { display: flex; align-items: center; margin-bottom: 10px; }  .audio-title {     color: #ffffff;    font-size: 1rem;    font-weight: 600;    margin-left: 10px;    flex-grow: 1;  }  .play-button {    background-color: #0e83cd;    border: none;    border-radius: 50%;    width: 36px;    height: 36px;    cursor: pointer;    transition: background-color 0.3s;    display: flex;    justify-content: center;    align-items: center;  }  .progress-container {    width: 100%;    height: 6px;    background-color: rgba(255, 255, 255, 0.2);    border-radius: 3px;    margin-bottom: 8px;  }  .progress-bar {    height: 100%;    background-color: #0e83cd;    border-radius: 3px;    width: 0%;    transition: width 0.1s linear;  }  .time-display {    display: flex;    justify-content: space-between;    color: rgba(255, 255, 255, 0.8);    font-size: 0.8rem;  }  .pause-icon { display: none; }</style><script>document.addEventListener('DOMContentLoaded', function() {  const audioElement = document.getElementById('audioElement');  const playButton = document.getElementById('playButton');  const playIcon = document.querySelector('.play-icon');  const pauseIcon = document.querySelector('.pause-icon');  const progressBar = document.getElementById('progressBar');  const progressContainer = document.getElementById('progressContainer');  const currentTimeDisplay = document.getElementById('currentTime');  const durationDisplay = document.getElementById('duration');  // 初始化时间显示  audioElement.addEventListener('loadedmetadata', () => {    durationDisplay.textContent = formatTime(audioElement.duration);  });  // 进度条更新  audioElement.addEventListener('timeupdate', () => {    const percent = (audioElement.currentTime / audioElement.duration) * 100;    progressBar.style.width = `${percent}%`;    currentTimeDisplay.textContent = formatTime(audioElement.currentTime);  });  // 播放/暂停控制  playButton.addEventListener('click', () => {    audioElement.paused ? audioElement.play() : audioElement.pause();    playIcon.style.display = audioElement.paused ? 'block' : 'none';    pauseIcon.style.display = audioElement.paused ? 'none' : 'block';  });  // 点击进度条跳转  progressContainer.addEventListener('click', (e) => {    const rect = progressContainer.getBoundingClientRect();    const percent = (e.clientX - rect.left) / rect.width;    audioElement.currentTime = percent * audioElement.duration;  });  // 时间格式化函数  function formatTime(seconds) {    const mins = Math.floor(seconds / 60);    const secs = Math.floor(seconds % 60);    return `${mins}:${secs.toString().padStart(2, '0')}`;  }});</script>            <input type="checkbox"  >前端三件套入门          <br>            <input type="checkbox"  >LaTex入门(微积分，线性代数)          <br>            <input type="checkbox"  >git与github的应用          <br>            <input type="checkbox"  >VS code的使用技巧          <br><br><!-- <a class="btn" href="https://www.xiaohongshu.com/user/profile/6668129f000000000303359b" title="听说" style="background-color: red; color: white;">小红书</a><br> --><!DOCTYPE html><html lang="zh-CN"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>按钮悬停效果</title>    <style>        .btn {            display: inline-block;            padding: 10px 20px;            background-color: grey;            color: white;            text-decoration: none;            border-radius: 5px;            transition: background-color 0.3s;        }        .btn:hover {            background-color: red;        }    </style></head><body>    <a class="btn" href="https://www.xiaohongshu.com/user/profile/6668129f000000000303359b" title="听说">        小红书    </a></body></html><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">2917063923@qq.com<br>tingshuo2917@gmail.com<br></code></pre></td></tr></table></figure><p>这里是我的学习笔记和一些思考（臆想）嘿嘿</p><div id="comments">    <script src="https://utteranc.es/client.js"            repo="tingshuo-yiqing/tingshuo-yiqing.github.io"            issue-term="pathname"            label="Comment"            theme="github-dark"            crossorigin="anonymous"            async>    </script></div>]]></content>
    
  </entry>
  
  
  
</search>
