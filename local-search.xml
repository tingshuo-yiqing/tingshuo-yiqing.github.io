<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>为Fluid添加评论系统</title>
    <link href="/2025/02/23/comment-sys/"/>
    <url>/2025/02/23/comment-sys/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
    
    <tags>
      
      <tag>comment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git 使用指北与问题解决</title>
    <link href="/2025/02/20/git-flow/"/>
    <url>/2025/02/20/git-flow/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note note-info">            <p>想用一杯Latte把你灌醉</p><p>好让你能多爱我一点</p>          </div><h2 id="1-访问github并汉化">1.访问github并汉化</h2><p>在微软商店安装<strong>Watt Toolkit</strong>可以直接加速github，然后用qq邮箱或其它邮箱都可以注册一下</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219224935829.png" alt=""></p><p>搜索框搜索“chinese汉化”认准第一个star7.8k即可，然后安装油猴(Tampermonkey)插件，再安装汉化脚本。还有许多脚本可以安装。</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219225253894.png" alt=""></p><p>进入文件夹右键打开选项卡，点击<code>用git bash打开</code></p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250220073842647.png" style="zoom:25%;" /><h2 id="2-安装和配置git">2.安装和配置git</h2><p>下载地址<a href="https://git-scm.com/">git-scm.com</a>，<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">镜像下载地址</a></p><h4 id="显示隐藏文件夹：">显示隐藏文件夹：</h4><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219230110370.png" style="zoom: 25%;" /><p>在VS code中显示隐藏文件夹只需要在设置里找到：Files:Exclude再把<code>**/.git</code>删除即可显示出来</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219231851407.png" alt=""></p><h2 id="3-git命令行配置">3.git命令行配置</h2><h4 id="初始化仓库过程用到的命令：">初始化仓库过程用到的命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git -v<br>git init  <span class="hljs-comment">#</span><br>git init -b main   <span class="hljs-comment">#-b main 明确告诉 Git 将初始分支命名为 main。</span><br><br>git config --global user.name <span class="hljs-string">&quot;你的名字&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;你的邮箱&quot;</span><br><br>git config --list <span class="hljs-comment">#查看刚刚配置的用户名和邮箱</span><br>git config --global --list <span class="hljs-comment"># 这个也可以查看配置信息</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219232912375.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219232959200.png" alt=""></p><h4 id="bash的基本操作">bash的基本操作</h4><p>常用快捷键：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ctrl + C 中断当前命令<br>Ctrl + L 或 clear: 清屏<br>Ctrl + A 移动光标到行头<br>Ctrl + E: 移动光标到行尾<br>Ctrl + U: 删除光标前的所有字符<br>Ctrl + K: 删除光标后的所有字符<br>Ctrl + W: 删除光标前的一个单词<br>Tab: 自动补全<br>↑ / ↓: 浏览历史命令<br></code></pre></td></tr></table></figure><h2 id="3-基础操作流程">3.基础操作流程</h2><h4 id="专业名词的理解">专业名词的理解</h4><p><code>git status</code>最常见的命令之一，初学者最好每一个命令就查看一下文件的状态.<code>git status -s</code>/<code>git status --short</code>是精简输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-comment"># 是将xxx输出到控制台，如果有空格的话要加引号</span><br><span class="hljs-built_in">echo</span> xxx &gt; &lt;file&gt;  <span class="hljs-comment"># 将xxx写入写入文件中，如果没有就创建一个</span><br><span class="hljs-built_in">echo</span> xxx &gt;&gt; &lt;file&gt;<br><br><br>git add xxx  <span class="hljs-comment"># U &gt; A</span><br>git add .<br><span class="hljs-comment"># A是已添加索引（会提示你git commit），U是未追踪文件（会提示你git add）</span><br><br>git commit -m <span class="hljs-string">&quot;提交信息，要准确详细&quot;</span><br>git commit     <span class="hljs-comment"># 进入vim编辑器，编辑</span><br><br>git <span class="hljs-built_in">log</span> <br>git <span class="hljs-built_in">log</span> -2 <span class="hljs-comment">#只看最近两条</span><br>git <span class="hljs-built_in">log</span> --oneline# 更简洁<br></code></pre></td></tr></table></figure><h4 id="文件的删除（命令行）">文件的删除（命令行）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> &lt;file&gt; <span class="hljs-comment"># 从暂存区和工作区删除</span><br><br>git re -cached &lt;file&gt; <span class="hljs-comment"># 只从暂存区中删除，工作区不变</span><br><br>git <span class="hljs-built_in">rm</span> -f &lt;file&gt; <span class="hljs-comment"># 强制删除文件，即使文件在工作区被修改</span><br><br>git <span class="hljs-built_in">rm</span> -rf &lt;directory&gt; <span class="hljs-comment">#递归删除所有文件和子目录</span><br><br>git commit -m <span class="hljs-string">&quot;删除&lt;file&gt;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>删除后需要<code>git commit</code>提交，如果只是想从工作目区中删除文件，可以使用操作系统的删除命令（rm <file>）然后再使用<code>git add .</code></p></blockquote><h4 id="文件删除（IDE）">文件删除（IDE）</h4><h2 id="4-SSH秘钥的创建">4.SSH秘钥的创建</h2><p>生成秘钥（ed25519算法）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span>  <br></code></pre></td></tr></table></figure><p>如果一些旧系统不支持ed25519算法的话，可以使用RSA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p><strong>第一次使用这个命令</strong>一直回车即可</p><p>在用户文件夹里查看密钥对</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219152152312.png" alt=""></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219152313294.png" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250220084930823.png" alt=""></div></div></div><p>添加公钥.pub文件复制粘贴至Github→ Settings → SSH Key，再连接测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>正常会报错：连接测试时出现：<code>ssh: connect to host github.com port 22: Connection timed out</code>通常是因为网络环境无法通过 <strong>22 端口</strong>连接到 GitHub 的 SSH 服务。可以通过以下步骤解决，官方文档为<a href="https://docs.github.com/en/authentication/troubleshooting-ssh/using-ssh-over-the-https-port">通过HTTP端口使用SSH</a></p><p>我们需要改HTTPS端口（443）使用SSH。方法为在生成的.ssh文件夹中添加配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑 SSH 配置文件</span><br>vim ~/.ssh/config<br><br><span class="hljs-comment"># 配置文件内容：</span><br>Host github.com          <span class="hljs-comment"># 别名，可以自定义</span><br>Hostname ssh.github.com   <span class="hljs-comment"># GitHub SSH 的实际主机名</span><br>Port 443                <span class="hljs-comment"># 使用 443 端口</span><br>User git                <span class="hljs-comment"># 使用 git 用户</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250220074831847.png" style="zoom:25%;" /><p>粘贴好后按Ecs再英文状态下的<code>:wq</code>保存退出，可以检查一下</p><p>再次测试时出现：<code>Hi username ! You've successfully authenticated, but GitHub does not provide shell access.</code>即成功了，我们就可以通过SSH克隆和推送仓库了</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250220085232998.png" alt=""></p><h2 id="5-gitignore的实践">5.gitignore的实践</h2><p>创建.gitignore文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将不需要推送的文件写入到.gitignore上</span><br><span class="hljs-built_in">echo</span> xxx &gt; .gitignore<br><span class="hljs-comment"># xxx可以是字符串，文件，文件夹，第一次使用重定向符&gt;</span><br><span class="hljs-comment">#如果已经用了.gitignore文件的话，就用&gt;&gt;追加符来添加新的文件或文件夹</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;.xxx\n.xx\n&quot;</span> &gt;&gt; .gitignore<br><span class="hljs-comment">#前面的.表示在根目录下</span><br></code></pre></td></tr></table></figure><p>常见的.gitignore文件包含：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 忽略所有 .log 文件,但是保留error.log文件</span><br>*.<span class="hljs-built_in">log</span><br>!error.log<br><br><span class="hljs-comment"># 忽略 node_modules 目录</span><br>node_modules/<br><br><span class="hljs-comment"># 忽略特定文件</span><br>config.ini<br><br><span class="hljs-comment"># 不忽略某个文件(即使前面已经有忽略规则)</span><br>!important.log<br></code></pre></td></tr></table></figure><blockquote><p>.gitignore 仅对<strong>从未被 Git 跟踪过的文件</strong>生效。若文件已被提交过，即使后续加入 .gitignore，仍需手动从 Git 中移除。此外，未跟踪但未忽略的文件仍可能导致分支污染，需定期检查工作目录状态（git status）</p></blockquote><p>更多模版可以参考github上的项目：<a href="https://github.com/github/gitignore">gitignore</a></p><h2 id="6-版本的回滚">6.版本的回滚</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看HEAD</span><br>git <span class="hljs-built_in">log</span> --oneliine --groph <span class="hljs-comment"># 更加简洁的查看提交ID</span><br>git reflog  <span class="hljs-comment"># 含已删除提交历史，可以快速找到提交ID</span><br><br>git diff HEAD &lt;commit-id&gt; <span class="hljs-comment"># 对比差异</span><br><br>git reset --hard HEAD~1  <span class="hljs-comment"># 彻底回退上一个提交</span><br>git reset --soft HEAD~1  <span class="hljs-comment"># 保留修改但回退 commit</span><br><span class="hljs-comment"># HEAD~1一般就是提交ID前6个字母或数字</span><br></code></pre></td></tr></table></figure><p>使用<code>git reset --hard</code>会重置工作目录到指定的提交，所有未提交的修改都会被删除。需要注意备份或暂存（<code>git stash</code>）这些更改，避免数据丢失。</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250222164535621.png" alt="提交ID"></p><h2 id="7-首次推送的命令：">7.首次推送的命令：</h2><p>关键是：</p><ul><li><p><strong>添加远程仓库的 URL (Add Remote Origin</strong></p></li><li><p><strong>推送本地分支到远程仓库 (Push to Remote):</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin &lt;你的GitHub仓库URL&gt;<br>git remote -v <span class="hljs-comment">#查看已配置的远程仓库信息</span><br><br>git push -u origin master <span class="hljs-comment">#取决于是main还是master且第一次需要 -u</span><br><br></code></pre></td></tr></table></figure><p>之后便可以</p><ul><li>推送后续提交: <strong>git push</strong> (默认会推送当前分支到其追踪的远程分支)</li><li>拉取远程更新: <strong>git pull</strong> (默认会拉取远程追踪分支的更新并合并到当前分支)</li></ul><h2 id="8-深入分支">8.深入分支</h2><blockquote><p>主分支包含了所有最终修改历史，建议不要乱动。因为你的改动会影响到其它在参与这个项目的人，很可能出现合并冲突。</p></blockquote><table><thead><tr><th>常见分支</th><th>功能</th></tr></thead><tbody><tr><td>develop（开发分支）dev</td><td></td></tr><tr><td>feature（功能分支）feat</td><td></td></tr><tr><td>release（发布分支）</td><td></td></tr><tr><td>hotfix（热修复分支）</td><td></td></tr><tr><td>bugfix（缺陷分支）</td><td></td></tr><tr><td>support（支持分支）</td><td></td></tr></tbody></table><h4 id="本地分支">本地分支</h4><pre><code class=" mermaid">graph LR    A[分支操作] --&gt; B(创建分支)    A --&gt; C(分支查看)    A --&gt; D(切换分支)    A --&gt; E(删除分支)    A --&gt; F(重命名分支)    A --&gt; G(分支合并)    B --&gt; B1(同时创建:&lt;br/&gt;仓库+分支)    B --&gt; B2(已有仓库，&lt;br/&gt;再创建分支)    B1 --&gt; B1a[git init -b &lt;分支名称&gt;]    B2 --&gt; B2a(仅创建分支)    B2 --&gt; B2b(创建并切换到分支)    B2a --&gt; B2aa[git branch &lt;分支名称&gt;]    B2b --&gt; B2ba[git checkout -b &lt;分支名称&gt;]    C --&gt; CA[git branch]    D --&gt; DA[git checkout &lt;分支名称&gt;]    E --&gt; EA[git branch -D &lt;分支名称&gt;]    F --&gt; FA[git branch -m &lt;原名称&gt; &lt;新名称&gt;]    G --&gt; GA(合并到当前分支)    GA --&gt; GAA[git merge &lt;被合并分支名称&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250222160617241.png" alt=""></p><p>这里可能会出现一个幻觉：我在分支里创建的文件为什么主分支里也有？，不是说都是独立的吗？原因是<strong>你未将新建的文件提交（commit）到分支中</strong>。此时文件处于“未跟踪”状态（untracked）（即还没有add），切换分支时这些未提交的改动会保留在工作目录中，与分支无关。因为<strong>未执行 <code>git add</code> 和 <code>git commit</code></strong>，所以<code>my.log</code> 未被记录到 Git 版本控制中。切换回 <code>master</code> 分支时，<strong>未提交的改动（包括未跟踪文件）会保留在工作目录</strong>，因此 <code>my.log</code> 仍然存在。</p><p>简单来说：</p><ul><li><strong>未提交文件</strong>：游离于分支外，切换分支时保留。</li><li><strong>提交后文件</strong>：与分支绑定，切换分支时自动隔离。</li></ul><p>当我们提交后：</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250222092557434.png" alt=""></p><p>这样主分支里就没有my.log了，就可以安心在分支里操作不用怕误操作主分支啦</p><p><strong>小总结</strong>：未提交的文件（untracked files）<strong>不属于任何分支</strong>，它们会“跟随”你的工作目录。只有提交到分支后，文件才会与分支绑定。</p><p>接下来是在分支里修改了文件，如果不提交或保存的话<strong>是不会让你切换的</strong></p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250222102912825.png" alt=""></p><p>它会让你在切换之前进行<code>git commit</code>或<code>git stash</code>先暂时保存再<code>git stash pop</code>恢复</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250222104045050.png" alt=""></p><p>这样就可以在你的本地分支上安心的操作了</p><p><strong>在分支间共享某些文件</strong>时（如配置文件），应通过 Git 的合并（<code>git merge</code>）或变基（<code>git rebase</code>）操作实现，而非手动复制文件。</p><p>执行删除操作的时候要格外小心<br>-d用于删除已合并过的分支，即已经被merge了<br>-D用于强制删除分支（不管是否合并过）</p><p>可以在在命令行中查看分支图<code>git log --graph --oneline --decorate --all</code>来可视化分支结构不过可能有一点抽象</p><h4 id="远程分支">远程分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -a <span class="hljs-comment"># 列出远程和本地分支，即所有分支</span><br><br>git push &lt;远程仓库名称比如origin&gt; &lt;分支名称&gt;  <span class="hljs-comment"># 推送某个分支</span><br>git push &lt;远程仓库名称&gt; --all <span class="hljs-comment"># 推送所有分支</span><br> <br>git push &lt;远程仓库名称&gt; -d &lt;分支名称&gt;<br></code></pre></td></tr></table></figure><p>在github上删除分支时的细节：</p><p>虽然在github上删除远程分支很简单，但是会导致本地库中缓存的远程分支与实际远程分支不一致。所以还要在git bash中同步远程分支执行：<code>git remote prune &lt;远程仓库名称&gt;</code></p><p><strong>还有一些细节比如，回溯、打标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout 提交ID(Commit ID)<br>git checkout 分支<br>git checkout tag<br><br>git tag <span class="hljs-comment"># 查看标签</span><br>git tag -d xxx <span class="hljs-comment"># 删除标签</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
