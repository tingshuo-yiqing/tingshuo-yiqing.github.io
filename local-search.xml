<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>git 使用指北与问题解决</title>
    <link href="/2025/02/20/%E8%A7%86%E9%A2%91/"/>
    <url>/2025/02/20/%E8%A7%86%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>想用一杯Latte把你灌醉</p><p>好让你能多爱我一点</p>          </div><h2 id="1-上github和汉化">1.上github和汉化</h2><p>在微软商店安装<strong>Watt Toolkit</strong>可以直接加速github，然后用qq邮箱或其它邮箱都可以注册一下</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219224935829.png" alt=""></p><p>搜索框搜索“chinese汉化”认准第一个star7.8k即可，然后安装油猴(Tampermonkey)插件，再安装汉化脚本。还有许多脚本可以安装。</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219225253894.png" alt=""></p><p>进入文件夹右键打开选项卡，点击<code>用git bash打开</code></p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250220073842647.png" alt=""></p><h2 id="2-安装和配置git">2.安装和配置git</h2><p>下载地址<a href="git-scm.com">git-scm.com</a>，<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">镜像下载地址</a></p><h4 id="显示隐藏文件夹：">显示隐藏文件夹：</h4><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219230110370.png" alt=""></p><p>在VS code中显示隐藏文件夹只需要在设置里找到：Files:Exclude再把<code>**/.git</code>删除即可显示出来</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219231851407.png" alt=""></p><h4 id="初始化仓库过程用到的命令：">初始化仓库过程用到的命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git -v<br>git init  <span class="hljs-comment">#</span><br>git init -b main   <span class="hljs-comment">#-b main 明确告诉 Git 将初始分支命名为 main。</span><br><br>git config --global user.name <span class="hljs-string">&quot;你的名字&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;你的邮箱&quot;</span><br><br>git config --list <span class="hljs-comment">#查看刚刚配置的用户名和邮箱</span><br>git config --global --list <span class="hljs-comment"># 这个也可以查看配置信息</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219232912375.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219232959200.png" alt=""></p><h4 id="bash的基本操作">bash的基本操作</h4><p>常用快捷键：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ctrl + C 中断当前命令<br>Ctrl + L 或 clear: 清屏<br>Ctrl + A 移动光标到行头<br>Ctrl + E: 移动光标到行尾<br>Ctrl + U: 删除光标前的所有字符<br>Ctrl + K: 删除光标后的所有字符<br>Ctrl + W: 删除光标前的一个单词<br>Tab: 自动补全<br>↑ / ↓: 浏览历史命令<br></code></pre></td></tr></table></figure><h2 id="3-基础操作流程">3.基础操作流程</h2><p><code>git status</code>最常见的命令之一，初学者最好每一个命令就查看一下文件的状态.<code>git status -s</code>/<code>git status --short</code>是精简输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> xxx &gt; &lt;file&gt;<br><span class="hljs-built_in">echo</span> xxx &gt;&gt; &lt;file&gt;<br><br>git add xxx  <span class="hljs-comment"># U &gt; A</span><br>git add .<br><br><span class="hljs-comment"># 撤回</span><br>git reset xxx   <span class="hljs-comment"># A &gt; U</span><br>git reset<br><br>git commit -m <span class="hljs-string">&quot;提交信息，要准确详细&quot;</span><br>git commit     <span class="hljs-comment"># 进入vim编辑器，编辑</span><br><br>git <span class="hljs-built_in">log</span> <br>git <span class="hljs-built_in">log</span> -2 <span class="hljs-comment">#只看最近两条</span><br>git <span class="hljs-built_in">log</span> --oneline# 更简洁<br></code></pre></td></tr></table></figure><h2 id="4-SSH秘钥的创建">4.SSH秘钥的创建</h2><p>生成秘钥（ed25519算法）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span>  <br></code></pre></td></tr></table></figure><p><strong>第一次使用这个命令</strong>一直回车即可</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250220084432930.png" alt=""></p><p>在用户文件夹里查看密钥对</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219152152312.png" alt=""></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250219152313294.png" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250220084930823.png" alt=""></div></div></div><p>添加公钥.pub文件复制粘贴至Github→ Settings → SSH Key，再连接测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>正常会报错：连接测试时出现：<code>ssh: connect to host github.com port 22: Connection timed out</code>通常是因为网络环境无法通过 <strong>22 端口</strong>连接到 GitHub 的 SSH 服务。可以通过以下步骤解决，官方文档为<a href="https://docs.github.com/en/authentication/troubleshooting-ssh/using-ssh-over-the-https-port">通过HTTP端口使用SSH</a></p><p>我们需要改HTTPS端口（443）使用SSH。方法为在生成的.ssh文件夹中添加配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑 SSH 配置文件</span><br>vim ~/.ssh/config<br><br><span class="hljs-comment"># 配置文件内容：</span><br>Host github.com          <span class="hljs-comment"># 别名，可以自定义</span><br>Hostname ssh.github.com   <span class="hljs-comment"># GitHub SSH 的实际主机名</span><br>Port 443                <span class="hljs-comment"># 使用 443 端口</span><br>User git                <span class="hljs-comment"># 使用 git 用户</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250220074831847.png" alt=""></p><p>粘贴好后按Ecs再英文状态下的<code>:wq</code>保存退出，可以检查一下</p><p>再次测试时出现：<code>Hi username ! You've successfully authenticated, but GitHub does not provide shell access.</code>即成功了，我们就可以通过SSH克隆和推送仓库了</p><p><img src="https://cdn.jsdelivr.net/gh/tingshuo-yiqing/PicGo-tuchuang/img/20250220085232998.png" alt=""></p><h2 id="5-第一次提交的命令：">5.第一次提交的命令：</h2><p>关键是：</p><ul><li><p><strong>添加远程仓库的 URL (Add Remote Origin</strong></p></li><li><p><strong>推送本地分支到远程仓库 (Push to Remote):</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin &lt;你的GitHub仓库URL&gt;<br>git remote -v <span class="hljs-comment">#查看已配置的远程仓库信息</span><br><br>git push -u origin master <span class="hljs-comment">#取决于是main还是master且第一次需要 -u</span><br><br></code></pre></td></tr></table></figure><p>之后便可以</p><ul><li>推送后续提交: <strong>git push</strong> (默认会推送当前分支到其追踪的远程分支)</li><li>拉取远程更新: <strong>git pull</strong> (默认会拉取远程追踪分支的更新并合并到当前分支)</li></ul><h2 id="6…gitignore的实践">6…gitignore的实践</h2><p>创建.gitignore文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将不需要推送的文件写入到.gitignore上</span><br><span class="hljs-built_in">echo</span> xxx &gt; .gitignore<br><span class="hljs-comment"># xxx可以是字符串，文件，文件夹，第一次使用重定向符&gt;</span><br><span class="hljs-comment">#如果已经用了.gitignore文件的话，就用&gt;&gt;追加符来添加新的文件或文件夹</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;.xxx\n.xx\n&quot;</span> &gt;&gt; .gitignore<br><span class="hljs-comment">#前面的.表示在根目录下</span><br></code></pre></td></tr></table></figure><p>常见的.gitignore文件包含：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 忽略所有 .log 文件</span><br>*.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># 忽略 node_modules 目录</span><br>node_modules/<br><br><span class="hljs-comment"># 忽略特定文件</span><br>config.ini<br><br><span class="hljs-comment"># 不忽略某个文件(即使前面已经有忽略规则)</span><br>!important.log<br></code></pre></td></tr></table></figure><p>更多模版可以参考github上的项目：<a href="https://github.com/github/gitignore">gitignore</a></p><h2 id="7-深入分支">7.深入分支</h2><p><strong>还有一些细节比如，回溯、打标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout 提交ID(Commit ID)<br>git checkout 分支<br>git checkout tag<br><br>git tag <span class="hljs-comment"># 查看标签</span><br>git tag -d xxx <span class="hljs-comment"># 删除标签</span><br> <br></code></pre></td></tr></table></figure><p><strong>回溯</strong>也有多种情况：</p><ul><li>软撤回</li><li>硬撤回</li></ul>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
